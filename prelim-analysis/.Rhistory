ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_ribbon(data = drift_ribbon,
aes(x = xvals,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_rect(data = sep_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_hline(data = params,
aes(yintercept = Separation_M, color = Trial.Type),
linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(data = params,
aes(xintercept = Non.Decision_M, color = Trial.Type)) +
scale_fill_discrete(guide = FALSE) +
scale_color_discrete(guide = FALSE) +
xlab("Time (seconds)") + ylab("Boundary Separation")
#     ggtitle(paste(ages[a], "\n", trialtypes[g], sep = " "))
}
}
plotlist <- c(list(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]],
p[[6]], p[[7]], p[[8]], p[[9]], p[[10]],
p[[11]], p[[12]], p[[13]], p[[14]], p[[15]]), ncol = 5, nrow = 3)
do.call(grid.arrange, plotlist)
#Visualize diffusion process for each trial_type
trialtypes <- c("all", "some", "none")
ages <- unique(sub.pars.ms$Age)
p <- list()
x <- 15 #this is max time
y <- 13 #max separation
for (a in 1:length(ages)) {
for (g in 1:length(trialtypes)) {
params <- sub.pars.ms %>%
subset(Trial.Type == trialtypes[g] & Age == ages[a]) %>%
gather(Name, Value, M:cih) %>% #because my df is in a different order from ann's
unite(Stats, Param, Name) %>%
spread(Stats, Value)
params$yint_M = (params$Bias_M*params$Separation_M) - (params$Drift_M*params$Non.Decision_M)
params$yint_cih = (params$Bias_M*params$Separation_M) - (params$Drift_cih*params$Non.Decision_M)
params$yint_cil = (params$Bias_M*params$Separation_M) - (params$Drift_cil*params$Non.Decision_M)
drift_ribbon <- data.frame(xvals = c(params$Non.Decision_M, #non-decision time
(params$Separation_M - params$yint_cih) / params$Drift_cih, #Point where high drift line hits separation boundary
(params$Separation_M - params$yint_M) / params$Drift_M, #Point where drift line hits separation boundary
ifelse(params$Drift_cil > 0, (params$Separation_M - params$yint_cil) / params$Drift_cil, (0 - params$yint_cil) / params$Drift_cil)), #Point where low drift line hits separation boundary or 0
ymin = c(params$Bias_M * params$Separation_M, #point where drift starts
params$Drift_cil*((params$Separation_M - params$yint_cih) / params$Drift_cih) + params$yint_cil, #point where low drift is when high drift ends
params$Drift_cil*((params$Separation_M - params$yint_M) / params$Drift_M) + params$yint_cil, #point where low drift is when drift ends
ifelse(params$Drift_cil > 0, params$Separation_M, 0)), #point where low drift ends
ymax = c(params$Bias_M * params$Separation_M, #point where drift starts
params$Separation_M, #point where drift ends
params$Separation_M, #point where drift ends
params$Separation_M),#point where drift ends
Trial.Type = rep(params$Trial.Type, 4))
nd_ribbon <- data.frame(xmin = params$Non.Decision_cil,
xmax = params$Non.Decision_cih,
ymin = rep(params$Bias_cil*params$Separation_cil, 2),
ymax = rep(params$Bias_cih*params$Separation_cih, 2),
Trial.Type = params$Trial.Type)
sep_ribbon <- data.frame(xmin = rep(c(0), 3),
xmax = rep(x, 3),
ymin = params$Separation_cil,
ymax = params$Separation_cih,
Trial.Type = params$Trial.Type)
d.diff <- data.frame()
if(params$Drift_M > 0){
pxend <- (params$Separation_M - params$yint_M)/params$Drift_M
pyend <- params$Separation_M
} else{
pxend <- (-(params$yint_M)/params$Drift_M)
pyend <- 0
}
print(pxend)
p[[g + length(trialtypes)*(a-1)]] <- ggplot(d.diff) + coord_cartesian(xlim = c(0, x), ylim = c(0, y)) +
geom_point() +  theme_bw() +
geom_segment(data = params,
aes(x = Non.Decision_M,
# xend = (Separation_M - yint_M) / Drift_M,
xend = pxend,
y = Bias_M * Separation_M, yend = pyend,
color = Trial.Type)) +
geom_rect(data = nd_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_ribbon(data = drift_ribbon,
aes(x = xvals,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_rect(data = sep_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_hline(data = params,
aes(yintercept = Separation_M, color = Trial.Type),
linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(data = params,
aes(xintercept = Non.Decision_M, color = Trial.Type)) +
scale_fill_discrete(guide = FALSE) +
scale_color_discrete(guide = FALSE) +
xlab("Time (seconds)") + ylab("Boundary Separation")
#     ggtitle(paste(ages[a], "\n", trialtypes[g], sep = " "))
}
}
plotlist <- c(list(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]],
p[[6]], p[[7]], p[[8]], p[[9]], p[[10]],
p[[11]], p[[12]], p[[13]], p[[14]], p[[15]]), ncol = 5, nrow = 3)
do.call(grid.arrange, plotlist)
#Visualize diffusion process for each trial_type
trialtypes <- c("all", "some", "none")
ages <- unique(sub.pars.ms$Age)
p <- list()
x <- 15 #this is max time
y <- 13 #max separation
for (a in 1:length(ages)) {
for (g in 1:length(trialtypes)) {
params <- sub.pars.ms %>%
subset(Trial.Type == trialtypes[g] & Age == ages[a]) %>%
gather(Name, Value, M:cih) %>% #because my df is in a different order from ann's
unite(Stats, Param, Name) %>%
spread(Stats, Value)
params$yint_M = (params$Bias_M*params$Separation_M) - (params$Drift_M*params$Non.Decision_M)
params$yint_cih = (params$Bias_M*params$Separation_M) - (params$Drift_cih*params$Non.Decision_M)
params$yint_cil = (params$Bias_M*params$Separation_M) - (params$Drift_cil*params$Non.Decision_M)
drift_ribbon <- data.frame(xvals = c(params$Non.Decision_M, #non-decision time
(params$Separation_M - params$yint_cih) / params$Drift_cih, #Point where high drift line hits separation boundary
(params$Separation_M - params$yint_M) / params$Drift_M, #Point where drift line hits separation boundary
ifelse(params$Drift_cil > 0, (params$Separation_M - params$yint_cil) / params$Drift_cil, (0 - params$yint_cil) / params$Drift_cil)), #Point where low drift line hits separation boundary or 0
ymin = c(params$Bias_M * params$Separation_M, #point where drift starts
params$Drift_cil*((params$Separation_M - params$yint_cih) / params$Drift_cih) + params$yint_cil, #point where low drift is when high drift ends
params$Drift_cil*((params$Separation_M - params$yint_M) / params$Drift_M) + params$yint_cil, #point where low drift is when drift ends
ifelse(params$Drift_cil > 0, params$Separation_M, 0)), #point where low drift ends
ymax = c(params$Bias_M * params$Separation_M, #point where drift starts
params$Separation_M, #point where drift ends
params$Separation_M, #point where drift ends
params$Separation_M),#point where drift ends
Trial.Type = rep(params$Trial.Type, 4))
nd_ribbon <- data.frame(xmin = params$Non.Decision_cil,
xmax = params$Non.Decision_cih,
ymin = rep(params$Bias_cil*params$Separation_cil, 2),
ymax = rep(params$Bias_cih*params$Separation_cih, 2),
Trial.Type = params$Trial.Type)
sep_ribbon <- data.frame(xmin = rep(c(0), 3),
xmax = rep(x, 3),
ymin = params$Separation_cil,
ymax = params$Separation_cih,
Trial.Type = params$Trial.Type)
d.diff <- data.frame()
print('sep ' + params$Separation_M)
print('int ' +params$yint_M)
print('drift ' +params$Drift_M)
if(params$Drift_M > 0){
pxend <- (params$Separation_M - params$yint_M)/params$Drift_M
pyend <- params$Separation_M
} else{
pxend <- (-(params$yint_M)/params$Drift_M)
pyend <- 0
}
print('px ' + pxend)
print('py ' + pyend)
p[[g + length(trialtypes)*(a-1)]] <- ggplot(d.diff) + coord_cartesian(xlim = c(0, x), ylim = c(0, y)) +
geom_point() +  theme_bw() +
geom_segment(data = params,
aes(x = Non.Decision_M,
# xend = (Separation_M - yint_M) / Drift_M,
xend = pxend,
y = Bias_M * Separation_M, yend = pyend,
color = Trial.Type)) +
geom_rect(data = nd_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_ribbon(data = drift_ribbon,
aes(x = xvals,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_rect(data = sep_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_hline(data = params,
aes(yintercept = Separation_M, color = Trial.Type),
linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(data = params,
aes(xintercept = Non.Decision_M, color = Trial.Type)) +
scale_fill_discrete(guide = FALSE) +
scale_color_discrete(guide = FALSE) +
xlab("Time (seconds)") + ylab("Boundary Separation")
#     ggtitle(paste(ages[a], "\n", trialtypes[g], sep = " "))
}
}
plotlist <- c(list(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]],
p[[6]], p[[7]], p[[8]], p[[9]], p[[10]],
p[[11]], p[[12]], p[[13]], p[[14]], p[[15]]), ncol = 5, nrow = 3)
do.call(grid.arrange, plotlist)
#Visualize diffusion process for each trial_type
trialtypes <- c("all", "some", "none")
ages <- unique(sub.pars.ms$Age)
p <- list()
x <- 15 #this is max time
y <- 13 #max separation
for (a in 1:length(ages)) {
for (g in 1:length(trialtypes)) {
params <- sub.pars.ms %>%
subset(Trial.Type == trialtypes[g] & Age == ages[a]) %>%
gather(Name, Value, M:cih) %>% #because my df is in a different order from ann's
unite(Stats, Param, Name) %>%
spread(Stats, Value)
params$yint_M = (params$Bias_M*params$Separation_M) - (params$Drift_M*params$Non.Decision_M)
params$yint_cih = (params$Bias_M*params$Separation_M) - (params$Drift_cih*params$Non.Decision_M)
params$yint_cil = (params$Bias_M*params$Separation_M) - (params$Drift_cil*params$Non.Decision_M)
drift_ribbon <- data.frame(xvals = c(params$Non.Decision_M, #non-decision time
(params$Separation_M - params$yint_cih) / params$Drift_cih, #Point where high drift line hits separation boundary
(params$Separation_M - params$yint_M) / params$Drift_M, #Point where drift line hits separation boundary
ifelse(params$Drift_cil > 0, (params$Separation_M - params$yint_cil) / params$Drift_cil, (0 - params$yint_cil) / params$Drift_cil)), #Point where low drift line hits separation boundary or 0
ymin = c(params$Bias_M * params$Separation_M, #point where drift starts
params$Drift_cil*((params$Separation_M - params$yint_cih) / params$Drift_cih) + params$yint_cil, #point where low drift is when high drift ends
params$Drift_cil*((params$Separation_M - params$yint_M) / params$Drift_M) + params$yint_cil, #point where low drift is when drift ends
ifelse(params$Drift_cil > 0, params$Separation_M, 0)), #point where low drift ends
ymax = c(params$Bias_M * params$Separation_M, #point where drift starts
params$Separation_M, #point where drift ends
params$Separation_M, #point where drift ends
params$Separation_M),#point where drift ends
Trial.Type = rep(params$Trial.Type, 4))
nd_ribbon <- data.frame(xmin = params$Non.Decision_cil,
xmax = params$Non.Decision_cih,
ymin = rep(params$Bias_cil*params$Separation_cil, 2),
ymax = rep(params$Bias_cih*params$Separation_cih, 2),
Trial.Type = params$Trial.Type)
sep_ribbon <- data.frame(xmin = rep(c(0), 3),
xmax = rep(x, 3),
ymin = params$Separation_cil,
ymax = params$Separation_cih,
Trial.Type = params$Trial.Type)
d.diff <- data.frame()
print(c('sep ', params$Separation_M))
print(c('int ',params$yint_M))
print(c('drift ',params$Drift_M))
if(params$Drift_M > 0){
pxend <- (params$Separation_M - params$yint_M)/params$Drift_M
pyend <- params$Separation_M
} else{
pxend <- (-(params$yint_M)/params$Drift_M)
pyend <- 0
}
print(c('px ', pxend))
print(c('py ', pyend))
p[[g + length(trialtypes)*(a-1)]] <- ggplot(d.diff) + coord_cartesian(xlim = c(0, x), ylim = c(0, y)) +
geom_point() +  theme_bw() +
geom_segment(data = params,
aes(x = Non.Decision_M,
# xend = (Separation_M - yint_M) / Drift_M,
xend = pxend,
y = Bias_M * Separation_M, yend = pyend,
color = Trial.Type)) +
geom_rect(data = nd_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_ribbon(data = drift_ribbon,
aes(x = xvals,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_rect(data = sep_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_hline(data = params,
aes(yintercept = Separation_M, color = Trial.Type),
linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(data = params,
aes(xintercept = Non.Decision_M, color = Trial.Type)) +
scale_fill_discrete(guide = FALSE) +
scale_color_discrete(guide = FALSE) +
xlab("Time (seconds)") + ylab("Boundary Separation")
#     ggtitle(paste(ages[a], "\n", trialtypes[g], sep = " "))
}
}
plotlist <- c(list(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]],
p[[6]], p[[7]], p[[8]], p[[9]], p[[10]],
p[[11]], p[[12]], p[[13]], p[[14]], p[[15]]), ncol = 5, nrow = 3)
do.call(grid.arrange, plotlist)
?geom_segment
#Visualize diffusion process for each trial_type
trialtypes <- c("all", "some", "none")
ages <- unique(sub.pars.ms$Age)
p <- list()
x <- 15 #this is max time
y <- 13 #max separation
for (a in 1:length(ages)) {
for (g in 1:length(trialtypes)) {
params <- sub.pars.ms %>%
subset(Trial.Type == trialtypes[g] & Age == ages[a]) %>%
gather(Name, Value, M:cih) %>% #because my df is in a different order from ann's
unite(Stats, Param, Name) %>%
spread(Stats, Value)
params$yint_M = (params$Bias_M*params$Separation_M) - (params$Drift_M*params$Non.Decision_M)
params$yint_cih = (params$Bias_M*params$Separation_M) - (params$Drift_cih*params$Non.Decision_M)
params$yint_cil = (params$Bias_M*params$Separation_M) - (params$Drift_cil*params$Non.Decision_M)
drift_ribbon <- data.frame(xvals = c(params$Non.Decision_M, #non-decision time
(params$Separation_M - params$yint_cih) / params$Drift_cih, #Point where high drift line hits separation boundary
(params$Separation_M - params$yint_M) / params$Drift_M, #Point where drift line hits separation boundary
ifelse(params$Drift_cil > 0, (params$Separation_M - params$yint_cil) / params$Drift_cil, (0 - params$yint_cil) / params$Drift_cil)), #Point where low drift line hits separation boundary or 0
ymin = c(params$Bias_M * params$Separation_M, #point where drift starts
params$Drift_cil*((params$Separation_M - params$yint_cih) / params$Drift_cih) + params$yint_cil, #point where low drift is when high drift ends
params$Drift_cil*((params$Separation_M - params$yint_M) / params$Drift_M) + params$yint_cil, #point where low drift is when drift ends
ifelse(params$Drift_cil > 0, params$Separation_M, 0)), #point where low drift ends
ymax = c(params$Bias_M * params$Separation_M, #point where drift starts
params$Separation_M, #point where drift ends
params$Separation_M, #point where drift ends
params$Separation_M),#point where drift ends
Trial.Type = rep(params$Trial.Type, 4))
nd_ribbon <- data.frame(xmin = params$Non.Decision_cil,
xmax = params$Non.Decision_cih,
ymin = rep(params$Bias_cil*params$Separation_cil, 2),
ymax = rep(params$Bias_cih*params$Separation_cih, 2),
Trial.Type = params$Trial.Type)
sep_ribbon <- data.frame(xmin = rep(c(0), 3),
xmax = rep(x, 3),
ymin = params$Separation_cil,
ymax = params$Separation_cih,
Trial.Type = params$Trial.Type)
d.diff <- data.frame()
print(c('sep ', params$Separation_M))
print(c('int ',params$yint_M))
print(c('drift ',params$Drift_M))
if(params$Drift_M > 0){
params$pxend <- (params$Separation_M - params$yint_M)/params$Drift_M
params$pyend <- params$Separation_M
} else{
params$pxend <- (-(params$yint_M)/params$Drift_M)
params$pyend <- 0
}
print(c('px ', pxend))
print(c('py ', pyend))
p[[g + length(trialtypes)*(a-1)]] <- ggplot(d.diff) + coord_cartesian(xlim = c(0, x), ylim = c(0, y)) +
geom_point() +  theme_bw() +
geom_segment(data = params,
aes(x = Non.Decision_M,
# xend = (Separation_M - yint_M) / Drift_M,
xend = pxend,
y = Bias_M * Separation_M, yend = pyend,
color = Trial.Type)) +
geom_rect(data = nd_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_ribbon(data = drift_ribbon,
aes(x = xvals,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_rect(data = sep_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_hline(data = params,
aes(yintercept = Separation_M, color = Trial.Type),
linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(data = params,
aes(xintercept = Non.Decision_M, color = Trial.Type)) +
scale_fill_discrete(guide = FALSE) +
scale_color_discrete(guide = FALSE) +
xlab("Time (seconds)") + ylab("Boundary Separation")
#     ggtitle(paste(ages[a], "\n", trialtypes[g], sep = " "))
}
}
plotlist <- c(list(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]],
p[[6]], p[[7]], p[[8]], p[[9]], p[[10]],
p[[11]], p[[12]], p[[13]], p[[14]], p[[15]]), ncol = 5, nrow = 3)
do.call(grid.arrange, plotlist)
?aes
?geom_segment
#Visualize diffusion process for each trial_type
trialtypes <- c("all", "some", "none")
ages <- unique(sub.pars.ms$Age)
p <- list()
x <- 15 #this is max time
y <- 13 #max separation
for (a in 1:length(ages)) {
for (g in 1:length(trialtypes)) {
params <- sub.pars.ms %>%
subset(Trial.Type == trialtypes[g] & Age == ages[a]) %>%
gather(Name, Value, M:cih) %>% #because my df is in a different order from ann's
unite(Stats, Param, Name) %>%
spread(Stats, Value)
params$yint_M = (params$Bias_M*params$Separation_M) - (params$Drift_M*params$Non.Decision_M)
params$yint_cih = (params$Bias_M*params$Separation_M) - (params$Drift_cih*params$Non.Decision_M)
params$yint_cil = (params$Bias_M*params$Separation_M) - (params$Drift_cil*params$Non.Decision_M)
drift_ribbon <- data.frame(xvals = c(params$Non.Decision_M, #non-decision time
(params$Separation_M - params$yint_cih) / params$Drift_cih, #Point where high drift line hits separation boundary
(params$Separation_M - params$yint_M) / params$Drift_M, #Point where drift line hits separation boundary
ifelse(params$Drift_cil > 0, (params$Separation_M - params$yint_cil) / params$Drift_cil, (0 - params$yint_cil) / params$Drift_cil)), #Point where low drift line hits separation boundary or 0
ymin = c(params$Bias_M * params$Separation_M, #point where drift starts
params$Drift_cil*((params$Separation_M - params$yint_cih) / params$Drift_cih) + params$yint_cil, #point where low drift is when high drift ends
params$Drift_cil*((params$Separation_M - params$yint_M) / params$Drift_M) + params$yint_cil, #point where low drift is when drift ends
ifelse(params$Drift_cil > 0, params$Separation_M, 0)), #point where low drift ends
ymax = c(params$Bias_M * params$Separation_M, #point where drift starts
params$Separation_M, #point where drift ends
params$Separation_M, #point where drift ends
params$Separation_M),#point where drift ends
Trial.Type = rep(params$Trial.Type, 4))
nd_ribbon <- data.frame(xmin = params$Non.Decision_cil,
xmax = params$Non.Decision_cih,
ymin = rep(params$Bias_cil*params$Separation_cil, 2),
ymax = rep(params$Bias_cih*params$Separation_cih, 2),
Trial.Type = params$Trial.Type)
sep_ribbon <- data.frame(xmin = rep(c(0), 3),
xmax = rep(x, 3),
ymin = params$Separation_cil,
ymax = params$Separation_cih,
Trial.Type = params$Trial.Type)
d.diff <- data.frame()
print(c('sep ', params$Separation_M))
print(c('int ',params$yint_M))
print(c('drift ',params$Drift_M))
if(params$Drift_M > 0){
params$pxend <- (params$Separation_M - params$yint_M)/params$Drift_M
params$pyend <- params$Separation_M
} else{
params$pxend <- (-(params$yint_M)/params$Drift_M)
params$pyend <- 0
}
print(c('px ', pxend))
print(c('py ', pyend))
p[[g + length(trialtypes)*(a-1)]] <- ggplot(d.diff) + coord_cartesian(xlim = c(0, x), ylim = c(0, y)) +
geom_point() +  theme_bw() +
geom_segment(data = params,
mapping = aes(x = Non.Decision_M,
# xend = (Separation_M - yint_M) / Drift_M,
xend = pxend,
y = Bias_M * Separation_M, yend = pyend,
color = Trial.Type)) +
geom_rect(data = nd_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_ribbon(data = drift_ribbon,
aes(x = xvals,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_rect(data = sep_ribbon,
aes(xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Trial.Type),
alpha=0.2) +
geom_hline(data = params,
aes(yintercept = Separation_M, color = Trial.Type),
linetype = "dashed") +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(data = params,
aes(xintercept = Non.Decision_M, color = Trial.Type)) +
scale_fill_discrete(guide = FALSE) +
scale_color_discrete(guide = FALSE) +
xlab("Time (seconds)") + ylab("Boundary Separation")
#     ggtitle(paste(ages[a], "\n", trialtypes[g], sep = " "))
}
}
plotlist <- c(list(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]],
p[[6]], p[[7]], p[[8]], p[[9]], p[[10]],
p[[11]], p[[12]], p[[13]], p[[14]], p[[15]]), ncol = 5, nrow = 3)
do.call(grid.arrange, plotlist)
?geom_segment
