legend.text=element_text(size=5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
ggplot(data = ms,
aes(x=trial_type, y=mean, fill=trial_type, alpha = agesplit)) +
geom_bar(stat="identity", position = position_dodge()) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .4,
show.legend = FALSE,
position=position_dodge(.9)) +
ylab("Proportion correct") +
xlab("Trial Type") +
theme_bw(base_size = 7) +
scale_fill_solarized(name = "Age") +
scale_alpha_manual(values=c(.4, .5,.625,.75,1)) +
theme(axis.title.x = element_text(size=7),
legend.position=c(.8,.8),
legend.key.size=unit(.2, "cm"),
axis.title.y  = element_text(size=7),
legend.title=element_text(size=5),
legend.text=element_text(size=5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank())
ggplot(data = ms,
aes(x=trial_type, y=mean, fill=trial_type, alpha = agesplit)) +
geom_bar(stat="identity", position = position_dodge()) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .4,
show.legend = FALSE,
position=position_dodge(.9)) +
ylab("Proportion correct") +
xlab("Trial Type") +
theme_bw(base_size = 7) +
scale_fill_solarized(name = "Age") +
scale_alpha_manual(values=c(.4, .5,.625,.75,1)) +
theme(axis.title.x = element_text(size=7),
legend.position=c(.8,.8),
legend.key.size=unit(.2, "cm"),
axis.title.y  = element_text(size=7),
legend.title=element_text(size=5),
legend.text=element_text(size=5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()) +
guides(fill = FALSE)
?guides
ms %<>%
rename(Age = agesplit)
ggplot(data = ms,
aes(x=trial_type, y=mean, fill=trial_type, alpha = Age)) +
geom_bar(stat="identity", position = position_dodge()) +
geom_linerange(aes(ymin = ci_lower,
ymax = ci_upper),
size = .4,
show.legend = FALSE,
position=position_dodge(.9)) +
ylab("Proportion correct") +
xlab("Trial Type") +
theme_bw(base_size = 7) +
scale_fill_solarized(name = "Age") +
scale_alpha_manual(values=c(.4, .5,.625,.75,1)) +
theme(axis.title.x = element_text(size=7),
legend.position=c(.8,.8),
legend.key.size=unit(.2, "cm"),
axis.title.y  = element_text(size=7),
legend.title=element_text(size=5),
legend.text=element_text(size=5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()) +
guides(fill = FALSE)
ms <- df %>%
group_by(sub_id, trial_type) %>%
multi_boot_standard("correct", na.rm=TRUE)
diptest_all <- diptest::dip.test(filter(ms, trial_type == "All")$mean)
diptest_some <- diptest::dip.test(filter(ms, trial_type == "Some")$mean)
diptest_none <- diptest::dip.test(filter(ms, trial_type == "None")$mean)
ms <- df %>%
group_by(sub_id, trial_type) %>%
summarise(correct = sum(correct))
ggplot(ms, aes(x = correct, fill=trial_type)) +
geom_histogram(binwidth = 1) +
theme_bw(base_size = 7) +
xlab("Total correct responses per participant") +
ylab("Frequency") +
facet_wrap(~trial_type) +
theme(legend.position="none") +
theme(axis.title.x = element_text(size = 7), axis.title.y = element_text(size = 7)) +
scale_x_continuous(breaks = c(0,2,4,6,8,10)) +
langcog::scale_fill_solarized()
num_trials <- df %>%
group_by(sub_id, trial_type)%>%
summarise(n = n())
View(num_trials)
trialtypes <- c("all", "some", "none")
#For easier to read graph
df$resp1 <- df$resp %>%
str_replace("lower", "Incorrect")%>%
str_replace("upper", "Correct")
#Stats for median lines
rt_stats <- df %>%
group_by(agesplit, trial_type, resp1)%>%
summarise(mean=mean(rt), median = median(rt))%>%
mutate(m = median/1000)
m_upper <- rt_stats %>%
filter(resp1 == "Correct")
m_lower <- rt_stats %>%
filter(resp1 == "Incorrect")
#for easier to read graph
df$resp1 <- factor(df$resp1, levels=c("Incorrect", "Correct"))
# quartz()
ggplot(df, aes(x=q)) +
geom_density(aes(weight = sum(resp1=="Correct")/length(resp1), fill = resp1), alpha=0.5) +
facet_grid(agesplit ~ trial_type) +
scale_fill_solarized(name = "Response") +
xlab("Response time (s)") +
ylab("Density of responses") +
xlim(c(0,10)) +
theme_bw(base_size = 7) +
theme(axis.title.x = element_text(size=7),
axis.title.y  = element_text(size=7),
legend.key.size=unit(.5, "cm"),
legend.title=element_text(size=6.5),
legend.text=element_text(size=6))
warnings()
lm <- summary(glmer(correct ~ age * trial_type +
(trial_type | sub_id),
family = "binomial", data = df, control=glmerControl(optimizer="bobyqa",
optCtrl=list(maxfun=2e5))))
install.packages('RWeiner')
install.packages('RWiener')
setwd("~/Documents/Projects/SI_tablet/paper/SI_tablet")
rm(list=ls())
knitr::opts_chunk$set(fig.width=3, fig.height=3, fig.crop = F, fig.pos = "tb", fig.path='figs/',
echo=F, warning=F, cache=TRUE, message=F, sanitize = T)
library(png)
library(grid)
library(ggplot2)
library(xtable)
library(reshape)
library(lme4)
library(dplyr)
library(stringr)
library(tidyr)
library(directlabels)
library(magrittr)
library(RCurl)
library(langcog)
library(diptest)
library(RWiener)
theme_set(theme_bw())
df <- read.csv("tmp_si.csv")
num_english <- df %>%
filter(english < 0.75)%>%
select(sub_id)%>%
distinct()%>%
summarise(n = n())
num_subjects <- df %>%
select(sub_id)%>%
distinct()
df %<>%
dplyr::mutate(age = as.numeric(age))%>%
dplyr::mutate(resp = factor(correct, levels=c("Y","N"), labels=c("upper","lower")),
q = rt/1000)%>%
dplyr::filter(selection_type != "someall" &
selection_type != "allall" &
selection_type != "allallall" &
selection_type != "allsome" &
selection_type != "somesome", na.rm=TRUE) %>% #this is filtering out the strange repeats
dplyr::filter(english >= 0.75, na.rm=TRUE) %>% # excluding less than 75% english exposure
dplyr::filter(english != "NA", na.rm=TRUE)%>% #avoiding the missing value that snuck back in
dplyr::mutate(age_round = round(age, digits = 2))%>% #for easier grouping
dplyr::mutate(agesplit = cut(age_round, breaks=c(3, 3.5, 4, 4.5, 5, 6.5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years",
"4-4.5 years", "4.5-5 years",
"5-6.5 years")))%>%
dplyr::filter(agesplit != "NA", na.rm = TRUE)
#for computing means
df$correct %<>%
str_replace("Y", 1)%>%
str_replace("N", 0)
df %<>%
dplyr::mutate(correct = as.numeric(correct))
#renaming for better graphs at the start
df$trial_type %<>%
str_replace("all", "All")%>%
str_replace("some", "Some")%>%
str_replace("none", "None")
df$selection_type %<>%
str_replace("all", "All")%>%
str_replace("some", "Some")%>%
str_replace("none", "None")
# Exclusions
df1 <-  subset(df, sub_id != "11716_14" & sub_id != "11316_2"
& sub_id != "121815_7" & sub_id != "1616_6"
& sub_id != "TM001" & sub_id != "TM003"
& sub_id != "TM004" & sub_id != "12416_9"
& sub_id!= "TM011") #excluded due to consent, low number of trials, and parental interference
#opaque missing data issue
df <- df1
#for figuring out percentage of trials lost due to RT exclusion
pre_cut <- df
# qplot(rt, data = df)
#There are some really crazy rts - exclude everything above 15s
df$clean.rt <- df$rt
df$clean.rt[df$rt > 15000] <- NA
mlog <- mean(log(df$clean.rt), na.rm=TRUE)
sdlog <- sd(log(df$clean.rt), na.rm=TRUE)
#Assign "NAs" to clean rts 3 sds outside of log of mean rt
df$clean.rt[log(df$clean.rt) > mlog + 3*sdlog |
log(df$clean.rt) < mlog - 3*sdlog] <- NA
#how much data do we lose in this data cleaning?
outlier <- as.numeric(sum(is.na(df$clean.rt) == TRUE))
total_loss <- outlier
percentage <- as.numeric((total_loss/nrow(df))*100)
rt_sstats <- df %>%
gather(measure, rt, rt, clean.rt) %>%
group_by(trial_type, measure) %>%
summarise(mean = mean(rt, na.rm=TRUE),
sd = sd(rt, na.rm=TRUE),
max = max(rt, na.rm=TRUE),
min = min(rt, na.rm=TRUE),
median=median(rt, na.rm=TRUE))
View(rt_sstats)
head(rt_sstats)
df %<>%
filter(clean.rt != "NA")
trialtypes = c("All", "Some", "None")
sub.pars <- data.frame(Separation = numeric(),
Non.Decision = numeric(),
Bias = numeric(),
Drift = numeric(),
Trial.Type = character(),
SubID = character(),
Age = character())
sub.pars$Trial.Type <- as.character(sub.pars$Trial.Type)
sub.pars$SubID <- as.character(sub.pars$SubID)
sub.pars$Age <- as.character(sub.pars$Age)
temp.pars <- sub.pars
df$resp <- as.character(df$resp)
for (j in 1:length(subs)) {
sid <- as.character(subs[j])
for (i in 1:length(trialtypes)) {
ttype <- as.character(trialtypes[i])
dat <- as.data.frame(subset(df, trial_type == ttype & sub_id == sid))
opt <- optim(c(1, .1, .1, 1), wiener_deviance,
dat=dplyr::select(dat, c(q, resp)), method="Nelder-Mead")
pars <- c(opt$par, ttype, sid, dat$agesplit[1])
temp.pars[i,] <- pars
}
sub.pars <- rbind(temp.pars, sub.pars)
}
df %<>%
filter(clean.rt != "NA")
trialtypes = c("All", "Some", "None")
#first, filter any outlier RTs - otherwise, RWiener will not fit the model
df %<>%
filter(clean.rt != "NA")
trialtypes = c("All", "Some", "None")
#create dataframe
sub.pars <- data.frame(Separation = numeric(),
Non.Decision = numeric(),
Bias = numeric(),
Drift = numeric(),
Trial.Type = character(),
SubID = character(),
Age = character())
sub.pars$Trial.Type <- as.character(sub.pars$Trial.Type)
sub.pars$SubID <- as.character(sub.pars$SubID)
sub.pars$Age <- as.character(sub.pars$Age)
temp.pars <- sub.pars
df$resp <- as.character(df$resp)
#this takes a while to run, but estimating parameters for each subject
subs <- unique(df$sub_id)
for (j in 1:length(subs)) {
sid <- as.character(subs[j])
for (i in 1:length(trialtypes)) {
ttype <- as.character(trialtypes[i])
dat <- as.data.frame(subset(df, trial_type == ttype & sub_id == sid))
opt <- optim(c(1, .1, .1, 1), wiener_deviance,
dat=dplyr::select(dat, c(q, resp)), method="Nelder-Mead")
pars <- c(opt$par, ttype, sid, dat$agesplit[1])
temp.pars[i,] <- pars
}
sub.pars <- rbind(temp.pars, sub.pars)
}
sub.pars$Separation <- as.numeric(sub.pars$Separation)
sub.pars$Non.Decision <- as.numeric(sub.pars$Non.Decision)
sub.pars$Bias <- as.numeric(sub.pars$Bias)
sub.pars$Drift <- as.numeric(sub.pars$Drift)
sub.pars <- select(sub.pars, -Age) %>%
rename(sub_id = SubID) %>%
left_join(df %>%
group_by(sub_id) %>%
distinct %>%
select(sub_id, age_round, agesplit)) %>%
gather(Param, Value, Separation:Drift)
sub.pars.ms <- sub.pars %>%
group_by(agesplit) %>%
mutate(Age = mean(age_round)) %>%
group_by(agesplit, Age, Trial.Type, Param) %>%
multi_boot_standard("Value", na.rm = TRUE)
sub.pars.dev <- sub.pars
sub.pars.ms.dev <- sub.pars.ms
quartz()
ggplot(sub.pars.ms.dev, aes(x=Age, y=mean, color=Trial.Type)) +
geom_point(size = 1.2, position=position_dodge(.05)) +
geom_linerange(aes(ymin = ci_lower, ymax = ci_upper),
position=position_dodge(.05)) +
geom_line(aes(colour = Trial.Type, group=Trial.Type)) +
facet_wrap(~Param, scales="free", ncol = 4) +
theme_bw(base_size = 7.7) +
theme(axis.text.x = element_text(size = 7),
axis.title.x = element_text(size = 7.5),
axis.title.y = element_text(size = 7.5),
axis.text.y = element_text(size = 7),
legend.text = element_text(size = 6),
legend.title = element_text(size = 6.5)) +
langcog::scale_color_solarized(guide_legend(title="Trial Type")) +
ylab("Mean") + xlab("Age (years)")
devo_sep_lm <- summary(lmer(Value ~ age_round * Trial.Type + (1 | sub_id),
data = filter(sub.pars.dev, Param=="Separation")))
summary(devo_sep_lm)
devo_nd_lm <- summary(lmer(Value ~ age_round * Trial.Type + (1 | sub_id),
data = filter(sub.pars.dev, Param=="Non.Decision")))
summary(devo_nd_lm)
devo_drift_lm <- summary(lmer(Value ~ age_round * Trial.Type + (1 | sub_id),
data = filter(sub.pars.dev, Param=="Drift")))
summary(devo_drift_lm)
devo_drift_lm <- summary(lmer(Value ~ age_round * Trial.Type + (1 | sub_id),
data = filter(sub.pars.dev, Param=="Drift")))
summary(devo_drift_lm)
#Finding out who has high performance on SI trials
#Manually added in csv
ms.acc <- df %>%
group_by(sub_id, trial_type) %>%
multi_boot_standard("correct", na.rm=TRUE)%>%
select(-ci_lower, -ci_upper)%>%
spread(trial_type, mean)%>%
filter(Some >= .75)
trialtypes = c("All", "Some", "None")
# #create dataframe for high accuracy
sub.pars.high <- data.frame(Separation = numeric(),
Non.Decision = numeric(),
Bias = numeric(),
Drift = numeric(),
Trial.Type = character(),
SubID = character(),
Age = character())
sub.pars.high$Trial.Type <- as.character(sub.pars.high$Trial.Type)
sub.pars.high$SubID <- as.character(sub.pars.high$SubID)
sub.pars.high$Age <- as.character(sub.pars.high$Age)
temp.pars.high <- sub.pars.high
# now for low
sub.pars.low <- data.frame(Separation = numeric(),
Non.Decision = numeric(),
Bias = numeric(),
Drift = numeric(),
Trial.Type = character(),
SubID = character(),
Age = character())
sub.pars.low$Trial.Type <- as.character(sub.pars.low$Trial.Type)
sub.pars.low$SubID <- as.character(sub.pars.low$SubID)
sub.pars.low$Age <- as.character(sub.pars.low$Age)
temp.pars.low <- sub.pars.low
df$resp <- as.character(df$resp)
#this takes a while to run, but estimating parameters for each subject
#make high and low df for indepdendent parameter estimates - bind together below
param.high <- df %>%
filter(accuracy == "high")
param.low <- df %>%
filter(accuracy == "low")
subs.high <- unique(param.high$sub_id)
subs.low <- unique(param.low$sub_id)
# first estimate params for high accuracy kids
for (j in 1:length(subs.high)) {
sid <- as.character(subs.high[j])
for (i in 1:length(trialtypes)) {
ttype <- as.character(trialtypes[i])
dat <- as.data.frame(subset(df, trial_type == ttype & sub_id == sid))
opt <- optim(c(1, .1, .1, 1), wiener_deviance,
dat=dplyr::select(dat, c(q, resp)), method="Nelder-Mead")
pars <- c(opt$par, ttype, sid, dat$agesplit[1])
temp.pars.high[i,] <- pars
}
sub.pars.high <- rbind(temp.pars.high, sub.pars.high)
}
# now for low
for (j in 1:length(subs.low)) {
sid <- as.character(subs.low[j])
for (i in 1:length(trialtypes)) {
ttype <- as.character(trialtypes[i])
dat <- as.data.frame(subset(param.low, trial_type == ttype & sub_id == sid))
opt <- optim(c(1, .1, .1, 1), wiener_deviance,
dat=dplyr::select(dat, c(q, resp)), method="Nelder-Mead")
pars <- c(opt$par, ttype, sid, dat$agesplit[1])
temp.pars.low[i,] <- pars
}
sub.pars.low <- rbind(temp.pars.low, sub.pars.low)
}
#bind two param estimates together for high and low
sub.pars <- rbind(sub.pars.low, sub.pars.high)
# sub.pars <- sub.pars.high
#high
sub.pars$Separation <- as.numeric(sub.pars$Separation)
sub.pars$Non.Decision <- as.numeric(sub.pars$Non.Decision)
sub.pars$Bias <- as.numeric(sub.pars$Bias)
sub.pars$Drift <- as.numeric(sub.pars$Drift)
sub.pars <- select(sub.pars, -Age) %>%
rename(sub_id = SubID) %>%
left_join(df %>%
group_by(sub_id) %>%
distinct %>%
select(sub_id, age_round, accuracy)) %>%
gather(Param, Value, Separation:Drift)
sub.pars.ms <- sub.pars %>%
group_by(accuracy) %>%
mutate(Age = mean(age_round)) %>%
group_by(accuracy, Trial.Type, Param) %>%
multi_boot_standard("Value", na.rm = TRUE)
sep_lm <- summary(lmer(Value ~ accuracy * Trial.Type + (1 | sub_id),
data = filter(sub.pars, Param=="Separation")))
summary(sep_lm)
sep_lmage <- summary(lmer(Value ~ accuracy* Trial.Type *age_round + (1 | sub_id),
data = filter(sub.pars, Param=="Separation")))
summary(sep_lmage)
nd_lm <- summary(lmer(Value ~ accuracy * Trial.Type + (1 | sub_id),
data = filter(sub.pars, Param=="Non.Decision")))
summary(nd_lm)
nd_lm_age <- summary(lmer(Value ~ accuracy * Trial.Type *age_round + (1 | sub_id),
data = filter(sub.pars, Param=="Non.Decision")))
summary(nd_lm_age)
bias_lm <- summary(lmer(Value ~ accuracy* Trial.Type + (1 | sub_id),
data = filter(sub.pars, Param=="Bias")))
summary(bias_lm)
bias_lmage <- summary(lmer(Value ~ accuracy * Trial.Type * age_round + (1 | sub_id),
data = filter(sub.pars, Param=="Bias")))
summary(bias_lmage)
setwd("~/Documents/Projects/SI_tablet/paper/SI_tablet")
rm(list=ls())
knitr::opts_chunk$set(fig.width=3, fig.height=3, fig.crop = F, fig.pos = "tb", fig.path='figs/',
echo=F, warning=F, cache=TRUE, message=F, sanitize = T)
library(png)
library(grid)
library(ggplot2)
library(xtable)
library(reshape)
library(lme4)
library(dplyr)
library(stringr)
library(tidyr)
library(directlabels)
library(magrittr)
library(RCurl)
library(langcog)
library(diptest)
library(RWiener)
theme_set(theme_bw())
df <- read.csv("tmp_si.csv")
num_english <- df %>%
filter(english < 0.75)%>%
select(sub_id)%>%
distinct()%>%
summarise(n = n())
num_subjects <- df %>%
select(sub_id)%>%
distinct()
df %<>%
dplyr::mutate(age = as.numeric(age))%>%
dplyr::mutate(resp = factor(correct, levels=c("Y","N"), labels=c("upper","lower")),
q = rt/1000)%>%
dplyr::filter(selection_type != "someall" &
selection_type != "allall" &
selection_type != "allallall" &
selection_type != "allsome" &
selection_type != "somesome", na.rm=TRUE) %>% #this is filtering out the strange repeats
dplyr::filter(english >= 0.75, na.rm=TRUE) %>% # excluding less than 75% english exposure
dplyr::filter(english != "NA", na.rm=TRUE)%>% #avoiding the missing value that snuck back in
dplyr::mutate(age_round = round(age, digits = 2))%>% #for easier grouping
dplyr::mutate(agesplit = cut(age_round, breaks=c(3, 3.5, 4, 4.5, 5, 6.5)),
agesplit = factor(agesplit,
labels=c("3-3.5 years", "3.5-4 years",
"4-4.5 years", "4.5-5 years",
"5-6.5 years")))%>%
dplyr::filter(agesplit != "NA", na.rm = TRUE)
#for computing means
df$correct %<>%
str_replace("Y", 1)%>%
str_replace("N", 0)
df %<>%
dplyr::mutate(correct = as.numeric(correct))
#renaming for better graphs at the start
df$trial_type %<>%
str_replace("all", "All")%>%
str_replace("some", "Some")%>%
str_replace("none", "None")
df$selection_type %<>%
str_replace("all", "All")%>%
str_replace("some", "Some")%>%
str_replace("none", "None")
# Exclusions
df1 <-  subset(df, sub_id != "11716_14" & sub_id != "11316_2"
& sub_id != "121815_7" & sub_id != "1616_6"
& sub_id != "TM001" & sub_id != "TM003"
& sub_id != "TM004" & sub_id != "12416_9"
& sub_id!= "TM011") #excluded due to consent, low number of trials, and parental interference
#opaque missing data issue
df <- df1
#for figuring out percentage of trials lost due to RT exclusion
pre_cut <- df
View(df)
